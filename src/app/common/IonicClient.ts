/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.5.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export module IonicClient {
export const API_BASE_URL = null;

@Injectable()
export class AccountClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1/Ionic";
    }

    /**
     * @return OK
     */
    getUserInfo(): Observable<UserInfoViewModel> {
        let url_ = this.baseUrl + "/api/Account/UserInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUserInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserInfo(<any>response_);
                } catch (e) {
                    return <Observable<UserInfoViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserInfoViewModel>><any>Observable.throw(response_);
        });
    }

    protected processGetUserInfo(response: Response): Observable<UserInfoViewModel> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserInfoViewModel.fromJS(resultData200) : new UserInfoViewModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UserInfoViewModel>(<any>null);
    }

    /**
     * @return OK
     */
    logout(): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/Logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processLogout(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLogout(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processLogout(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @generateState (optional) 
     * @return OK
     */
    getManageInfo(returnUrl: string, generateState: boolean | null | undefined): Observable<ManageInfoViewModel> {
        let url_ = this.baseUrl + "/api/Account/ManageInfo?";
        if (returnUrl === undefined || returnUrl === null)
            throw new Error("The parameter 'returnUrl' must be defined and cannot be null.");
        else
            url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&"; 
        if (generateState !== undefined)
            url_ += "generateState=" + encodeURIComponent("" + generateState) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetManageInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetManageInfo(<any>response_);
                } catch (e) {
                    return <Observable<ManageInfoViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ManageInfoViewModel>><any>Observable.throw(response_);
        });
    }

    protected processGetManageInfo(response: Response): Observable<ManageInfoViewModel> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ManageInfoViewModel.fromJS(resultData200) : new ManageInfoViewModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ManageInfoViewModel>(<any>null);
    }

    /**
     * @return OK
     */
    changePassword(model: ChangePasswordBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processChangePassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePassword(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processChangePassword(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return OK
     */
    setPassword(model: SetPasswordBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/SetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSetPassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetPassword(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processSetPassword(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return OK
     */
    addExternalLogin(model: AddExternalLoginBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/AddExternalLogin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processAddExternalLogin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAddExternalLogin(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processAddExternalLogin(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return OK
     */
    removeLogin(model: RemoveLoginBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/RemoveLogin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processRemoveLogin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRemoveLogin(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processRemoveLogin(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @error (optional) 
     * @return OK
     */
    getExternalLogin(provider: string, error: string | null | undefined): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/ExternalLogin?";
        if (provider === undefined || provider === null)
            throw new Error("The parameter 'provider' must be defined and cannot be null.");
        else
            url_ += "provider=" + encodeURIComponent("" + provider) + "&"; 
        if (error !== undefined)
            url_ += "error=" + encodeURIComponent("" + error) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetExternalLogin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExternalLogin(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processGetExternalLogin(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @generateState (optional) 
     * @return OK
     */
    getExternalLogins(returnUrl: string, generateState: boolean | null | undefined): Observable<ExternalLoginViewModel[]> {
        let url_ = this.baseUrl + "/api/Account/ExternalLogins?";
        if (returnUrl === undefined || returnUrl === null)
            throw new Error("The parameter 'returnUrl' must be defined and cannot be null.");
        else
            url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&"; 
        if (generateState !== undefined)
            url_ += "generateState=" + encodeURIComponent("" + generateState) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetExternalLogins(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExternalLogins(<any>response_);
                } catch (e) {
                    return <Observable<ExternalLoginViewModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginViewModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetExternalLogins(response: Response): Observable<ExternalLoginViewModel[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginViewModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ExternalLoginViewModel[]>(<any>null);
    }

    /**
     * @return OK
     */
    register(model: RegisterBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processRegister(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processRegister(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return OK
     */
    registerExternal(model: RegisterExternalBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/RegisterExternal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processRegisterExternal(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegisterExternal(<any>response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processRegisterExternal(response: Response): Observable<any> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }
}

@Injectable()
export class LoginClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1/Ionic";
    }

    /**
     * @return Operazione riuscita
     */
    get(): Observable<Test> {
        let url_ = this.baseUrl + "/api/Login";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Test>><any>Observable.throw(e);
                }
            } else
                return <Observable<Test>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<Test> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Test.fromJS(resultData200) : new Test();
            return Observable.of(result200);
        } else if (status === 400) {
            const _responseText = response.text();
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? _400BadRequest.fromJS(resultData400) : new _400BadRequest();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 403) {
            const _responseText = response.text();
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 ? _403Forbidden.fromJS(resultData403) : new _403Forbidden();
            return throwException("A server error occurred.", status, _responseText, _headers, result403);
        } else if (status === 500) {
            const _responseText = response.text();
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 ? _500InternalServerError.fromJS(resultData500) : new _500InternalServerError();
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Test>(<any>null);
    }
}

@Injectable()
export class ValuesClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1/Ionic";
    }

    /**
     * @return OK
     */
    getAll(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAll(response: Response): Observable<string[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string[]>(<any>null);
    }

    /**
     * @return No Content
     */
    post(value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<void> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 204) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return OK
     */
    get(id: number): Observable<string> {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<string> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @return No Content
     */
    put(id: number, value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 204) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return No Content
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 204) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

export class UserInfoViewModel implements IUserInfoViewModel {
    email: string | undefined;
    hasRegistered: boolean | undefined;
    loginProvider: string | undefined;

    constructor(data?: IUserInfoViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["Email"];
            this.hasRegistered = data["HasRegistered"];
            this.loginProvider = data["LoginProvider"];
        }
    }

    static fromJS(data: any): UserInfoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        data["HasRegistered"] = this.hasRegistered;
        data["LoginProvider"] = this.loginProvider;
        return data; 
    }
}

export interface IUserInfoViewModel {
    email: string | undefined;
    hasRegistered: boolean | undefined;
    loginProvider: string | undefined;
}

export class ManageInfoViewModel implements IManageInfoViewModel {
    localLoginProvider: string | undefined;
    email: string | undefined;
    logins: UserLoginInfoViewModel[] | undefined;
    externalLoginProviders: ExternalLoginViewModel[] | undefined;

    constructor(data?: IManageInfoViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.localLoginProvider = data["LocalLoginProvider"];
            this.email = data["Email"];
            if (data["Logins"] && data["Logins"].constructor === Array) {
                this.logins = [];
                for (let item of data["Logins"])
                    this.logins.push(UserLoginInfoViewModel.fromJS(item));
            }
            if (data["ExternalLoginProviders"] && data["ExternalLoginProviders"].constructor === Array) {
                this.externalLoginProviders = [];
                for (let item of data["ExternalLoginProviders"])
                    this.externalLoginProviders.push(ExternalLoginViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ManageInfoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ManageInfoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LocalLoginProvider"] = this.localLoginProvider;
        data["Email"] = this.email;
        if (this.logins && this.logins.constructor === Array) {
            data["Logins"] = [];
            for (let item of this.logins)
                data["Logins"].push(item.toJSON());
        }
        if (this.externalLoginProviders && this.externalLoginProviders.constructor === Array) {
            data["ExternalLoginProviders"] = [];
            for (let item of this.externalLoginProviders)
                data["ExternalLoginProviders"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IManageInfoViewModel {
    localLoginProvider: string | undefined;
    email: string | undefined;
    logins: UserLoginInfoViewModel[] | undefined;
    externalLoginProviders: ExternalLoginViewModel[] | undefined;
}

export class UserLoginInfoViewModel implements IUserLoginInfoViewModel {
    loginProvider: string | undefined;
    providerKey: string | undefined;

    constructor(data?: IUserLoginInfoViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginProvider = data["LoginProvider"];
            this.providerKey = data["ProviderKey"];
        }
    }

    static fromJS(data: any): UserLoginInfoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LoginProvider"] = this.loginProvider;
        data["ProviderKey"] = this.providerKey;
        return data; 
    }
}

export interface IUserLoginInfoViewModel {
    loginProvider: string | undefined;
    providerKey: string | undefined;
}

export class ExternalLoginViewModel implements IExternalLoginViewModel {
    name: string | undefined;
    url: string | undefined;
    state: string | undefined;

    constructor(data?: IExternalLoginViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["Name"];
            this.url = data["Url"];
            this.state = data["State"];
        }
    }

    static fromJS(data: any): ExternalLoginViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLoginViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["Url"] = this.url;
        data["State"] = this.state;
        return data; 
    }
}

export interface IExternalLoginViewModel {
    name: string | undefined;
    url: string | undefined;
    state: string | undefined;
}

export class ChangePasswordBindingModel implements IChangePasswordBindingModel {
    oldPassword: string;
    newPassword: string;
    confirmPassword: string | undefined;

    constructor(data?: IChangePasswordBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.oldPassword = data["OldPassword"];
            this.newPassword = data["NewPassword"];
            this.confirmPassword = data["ConfirmPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OldPassword"] = this.oldPassword;
        data["NewPassword"] = this.newPassword;
        data["ConfirmPassword"] = this.confirmPassword;
        return data; 
    }
}

export interface IChangePasswordBindingModel {
    oldPassword: string;
    newPassword: string;
    confirmPassword: string | undefined;
}

export class SetPasswordBindingModel implements ISetPasswordBindingModel {
    newPassword: string;
    confirmPassword: string | undefined;

    constructor(data?: ISetPasswordBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newPassword = data["NewPassword"];
            this.confirmPassword = data["ConfirmPassword"];
        }
    }

    static fromJS(data: any): SetPasswordBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new SetPasswordBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["NewPassword"] = this.newPassword;
        data["ConfirmPassword"] = this.confirmPassword;
        return data; 
    }
}

export interface ISetPasswordBindingModel {
    newPassword: string;
    confirmPassword: string | undefined;
}

export class AddExternalLoginBindingModel implements IAddExternalLoginBindingModel {
    externalAccessToken: string;

    constructor(data?: IAddExternalLoginBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.externalAccessToken = data["ExternalAccessToken"];
        }
    }

    static fromJS(data: any): AddExternalLoginBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddExternalLoginBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ExternalAccessToken"] = this.externalAccessToken;
        return data; 
    }
}

export interface IAddExternalLoginBindingModel {
    externalAccessToken: string;
}

export class RemoveLoginBindingModel implements IRemoveLoginBindingModel {
    loginProvider: string;
    providerKey: string;

    constructor(data?: IRemoveLoginBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginProvider = data["LoginProvider"];
            this.providerKey = data["ProviderKey"];
        }
    }

    static fromJS(data: any): RemoveLoginBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveLoginBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LoginProvider"] = this.loginProvider;
        data["ProviderKey"] = this.providerKey;
        return data; 
    }
}

export interface IRemoveLoginBindingModel {
    loginProvider: string;
    providerKey: string;
}

export class RegisterBindingModel implements IRegisterBindingModel {
    email: string;
    password: string;
    confirmPassword: string | undefined;

    constructor(data?: IRegisterBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["Email"];
            this.password = data["Password"];
            this.confirmPassword = data["ConfirmPassword"];
        }
    }

    static fromJS(data: any): RegisterBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        data["Password"] = this.password;
        data["ConfirmPassword"] = this.confirmPassword;
        return data; 
    }
}

export interface IRegisterBindingModel {
    email: string;
    password: string;
    confirmPassword: string | undefined;
}

export class RegisterExternalBindingModel implements IRegisterExternalBindingModel {
    email: string;

    constructor(data?: IRegisterExternalBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["Email"];
        }
    }

    static fromJS(data: any): RegisterExternalBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterExternalBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        return data; 
    }
}

export interface IRegisterExternalBindingModel {
    email: string;
}

export class Test implements ITest {
    nome: string | undefined;
    cognome: string | undefined;
    cap: string | undefined;
    email: string | undefined;
    lista: ListaProva[] | undefined;

    constructor(data?: ITest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.nome = data["Nome"];
            this.cognome = data["Cognome"];
            this.cap = data["Cap"];
            this.email = data["Email"];
            if (data["lista"] && data["lista"].constructor === Array) {
                this.lista = [];
                for (let item of data["lista"])
                    this.lista.push(ListaProva.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Test {
        data = typeof data === 'object' ? data : {};
        let result = new Test();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Nome"] = this.nome;
        data["Cognome"] = this.cognome;
        data["Cap"] = this.cap;
        data["Email"] = this.email;
        if (this.lista && this.lista.constructor === Array) {
            data["lista"] = [];
            for (let item of this.lista)
                data["lista"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITest {
    nome: string | undefined;
    cognome: string | undefined;
    cap: string | undefined;
    email: string | undefined;
    lista: ListaProva[] | undefined;
}

export class ListaProva implements IListaProva {
    nome: string | undefined;
    id: number | undefined;

    constructor(data?: IListaProva) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.nome = data["Nome"];
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): ListaProva {
        data = typeof data === 'object' ? data : {};
        let result = new ListaProva();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Nome"] = this.nome;
        data["Id"] = this.id;
        return data; 
    }
}

export interface IListaProva {
    nome: string | undefined;
    id: number | undefined;
}

export class _400BadRequest implements I_400BadRequest {
    status: number | undefined;
    message: string | undefined;
    userID: string | undefined;

    constructor(data?: I_400BadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["Status"];
            this.message = data["Message"];
            this.userID = data["UserID"];
        }
    }

    static fromJS(data: any): _400BadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new _400BadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Status"] = this.status;
        data["Message"] = this.message;
        data["UserID"] = this.userID;
        return data; 
    }
}

export interface I_400BadRequest {
    status: number | undefined;
    message: string | undefined;
    userID: string | undefined;
}

export class _403Forbidden implements I_403Forbidden {
    status: number | undefined;
    message: string | undefined;
    userID: string | undefined;

    constructor(data?: I_403Forbidden) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["Status"];
            this.message = data["Message"];
            this.userID = data["UserID"];
        }
    }

    static fromJS(data: any): _403Forbidden {
        data = typeof data === 'object' ? data : {};
        let result = new _403Forbidden();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Status"] = this.status;
        data["Message"] = this.message;
        data["UserID"] = this.userID;
        return data; 
    }
}

export interface I_403Forbidden {
    status: number | undefined;
    message: string | undefined;
    userID: string | undefined;
}

export class _500InternalServerError implements I_500InternalServerError {
    status: number | undefined;
    message: string | undefined;
    stackTrace: string | undefined;
    userID: string | undefined;

    constructor(data?: I_500InternalServerError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["Status"];
            this.message = data["Message"];
            this.stackTrace = data["StackTrace"];
            this.userID = data["UserID"];
        }
    }

    static fromJS(data: any): _500InternalServerError {
        data = typeof data === 'object' ? data : {};
        let result = new _500InternalServerError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Status"] = this.status;
        data["Message"] = this.message;
        data["StackTrace"] = this.stackTrace;
        data["UserID"] = this.userID;
        return data; 
    }
}

export interface I_500InternalServerError {
    status: number | undefined;
    message: string | undefined;
    stackTrace: string | undefined;
    userID: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}

}